/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Fringe API
 * API for Fringe application
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateShowDto,
  CreateVenueDto,
  ForgotPasswordDto,
  LoginDto,
  ProblemDetails,
  RefreshTokenDto,
  RegisterDto,
  ResetPasswordDto,
  RoleDto,
  UpdateShowDto
} from '@/types/api';

import { customInstance } from './mutator/custom-instance';




export const postAuthLogin = (
    loginDto: LoginDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto, signal
    },
      );
    }
  


export const getPostAuthLoginMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginDto}, TContext> => {
    
const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = LoginDto
    export type PostAuthLoginMutationError = ProblemDetails

    export const usePostAuthLogin = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: LoginDto},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthRegister = (
    registerDto: RegisterDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerDto, signal
    },
      );
    }
  


export const getPostAuthRegisterMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: RegisterDto}, TContext> => {
    
const mutationKey = ['postAuthRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRegister>>, {data: RegisterDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRegister>>>
    export type PostAuthRegisterMutationBody = RegisterDto
    export type PostAuthRegisterMutationError = ProblemDetails

    export const usePostAuthRegister = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRegister>>,
        TError,
        {data: RegisterDto},
        TContext
      > => {

      const mutationOptions = getPostAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthRefreshToken = (
    refreshTokenDto: RefreshTokenDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenDto, signal
    },
      );
    }
  


export const getPostAuthRefreshTokenMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefreshToken>>, TError,{data: RefreshTokenDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRefreshToken>>, TError,{data: RefreshTokenDto}, TContext> => {
    
const mutationKey = ['postAuthRefreshToken'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRefreshToken>>, {data: RefreshTokenDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRefreshToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRefreshToken>>>
    export type PostAuthRefreshTokenMutationBody = RefreshTokenDto
    export type PostAuthRefreshTokenMutationError = ProblemDetails

    export const usePostAuthRefreshToken = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefreshToken>>, TError,{data: RefreshTokenDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRefreshToken>>,
        TError,
        {data: RefreshTokenDto},
        TContext
      > => {

      const mutationOptions = getPostAuthRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthForgotPassword = (
    forgotPasswordDto: ForgotPasswordDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/forgot-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: forgotPasswordDto, signal
    },
      );
    }
  


export const getPostAuthForgotPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: ForgotPasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: ForgotPasswordDto}, TContext> => {
    
const mutationKey = ['postAuthForgotPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthForgotPassword>>, {data: ForgotPasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthForgotPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthForgotPassword>>>
    export type PostAuthForgotPasswordMutationBody = ForgotPasswordDto
    export type PostAuthForgotPasswordMutationError = unknown

    export const usePostAuthForgotPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: ForgotPasswordDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthForgotPassword>>,
        TError,
        {data: ForgotPasswordDto},
        TContext
      > => {

      const mutationOptions = getPostAuthForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthResetPassword = (
    resetPasswordDto: ResetPasswordDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordDto, signal
    },
      );
    }
  


export const getPostAuthResetPasswordMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: ResetPasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: ResetPasswordDto}, TContext> => {
    
const mutationKey = ['postAuthResetPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResetPassword>>, {data: ResetPasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResetPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResetPassword>>>
    export type PostAuthResetPasswordMutationBody = ResetPasswordDto
    export type PostAuthResetPasswordMutationError = ProblemDetails

    export const usePostAuthResetPassword = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: ResetPasswordDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthResetPassword>>,
        TError,
        {data: ResetPasswordDto},
        TContext
      > => {

      const mutationOptions = getPostAuthResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthCreateManager = (
    registerDto: RegisterDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/create-manager`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerDto, signal
    },
      );
    }
  


export const getPostAuthCreateManagerMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthCreateManager>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthCreateManager>>, TError,{data: RegisterDto}, TContext> => {
    
const mutationKey = ['postAuthCreateManager'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthCreateManager>>, {data: RegisterDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthCreateManager(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthCreateManagerMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthCreateManager>>>
    export type PostAuthCreateManagerMutationBody = RegisterDto
    export type PostAuthCreateManagerMutationError = ProblemDetails

    export const usePostAuthCreateManager = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthCreateManager>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthCreateManager>>,
        TError,
        {data: RegisterDto},
        TContext
      > => {

      const mutationOptions = getPostAuthCreateManagerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAuthUsersRole = (
    role: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/users/${role}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAuthUsersRoleQueryKey = (role: string,) => {
    return [`/Auth/users/${role}`] as const;
    }

    
export const getGetAuthUsersRoleQueryOptions = <TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(role: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthUsersRoleQueryKey(role);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthUsersRole>>> = ({ signal }) => getAuthUsersRole(role, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(role), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthUsersRoleQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthUsersRole>>>
export type GetAuthUsersRoleQueryError = unknown


export function useGetAuthUsersRole<TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(
 role: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthUsersRole>>,
          TError,
          Awaited<ReturnType<typeof getAuthUsersRole>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthUsersRole<TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(
 role: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthUsersRole>>,
          TError,
          Awaited<ReturnType<typeof getAuthUsersRole>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthUsersRole<TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(
 role: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAuthUsersRole<TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(
 role: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthUsersRoleQueryOptions(role,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRoles = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Roles`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiRolesQueryKey = () => {
    return [`/api/Roles`] as const;
    }

    
export const getGetApiRolesQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoles>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRolesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoles>>> = ({ signal }) => getApiRoles(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoles>>>
export type GetApiRolesQueryError = unknown


export function useGetApiRoles<TData = Awaited<ReturnType<typeof getApiRoles>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiRoles>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoles<TData = Awaited<ReturnType<typeof getApiRoles>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiRoles>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoles<TData = Awaited<ReturnType<typeof getApiRoles>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRoles<TData = Awaited<ReturnType<typeof getApiRoles>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRolesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRoles = (
    roleDto: RoleDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Roles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleDto, signal
    },
      );
    }
  


export const getPostApiRolesMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoles>>, TError,{data: RoleDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiRoles>>, TError,{data: RoleDto}, TContext> => {
    
const mutationKey = ['postApiRoles'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRoles>>, {data: RoleDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiRoles(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRolesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRoles>>>
    export type PostApiRolesMutationBody = RoleDto
    export type PostApiRolesMutationError = ProblemDetails

    export const usePostApiRoles = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoles>>, TError,{data: RoleDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiRoles>>,
        TError,
        {data: RoleDto},
        TContext
      > => {

      const mutationOptions = getPostApiRolesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiRolesId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Roles/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiRolesIdQueryKey = (id: number,) => {
    return [`/api/Roles/${id}`] as const;
    }

    
export const getGetApiRolesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRolesId>>, TError = ProblemDetails>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRolesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRolesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRolesId>>> = ({ signal }) => getApiRolesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRolesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRolesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRolesId>>>
export type GetApiRolesIdQueryError = ProblemDetails


export function useGetApiRolesId<TData = Awaited<ReturnType<typeof getApiRolesId>>, TError = ProblemDetails>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRolesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRolesId>>,
          TError,
          Awaited<ReturnType<typeof getApiRolesId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRolesId<TData = Awaited<ReturnType<typeof getApiRolesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRolesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRolesId>>,
          TError,
          Awaited<ReturnType<typeof getApiRolesId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRolesId<TData = Awaited<ReturnType<typeof getApiRolesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRolesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRolesId<TData = Awaited<ReturnType<typeof getApiRolesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRolesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRolesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiRolesId = (
    id: number,
    roleDto: RoleDto,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Roles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: roleDto
    },
      );
    }
  


export const getPutApiRolesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRolesId>>, TError,{id: number;data: RoleDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiRolesId>>, TError,{id: number;data: RoleDto}, TContext> => {
    
const mutationKey = ['putApiRolesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRolesId>>, {id: number;data: RoleDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiRolesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiRolesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRolesId>>>
    export type PutApiRolesIdMutationBody = RoleDto
    export type PutApiRolesIdMutationError = ProblemDetails

    export const usePutApiRolesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRolesId>>, TError,{id: number;data: RoleDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApiRolesId>>,
        TError,
        {id: number;data: RoleDto},
        TContext
      > => {

      const mutationOptions = getPutApiRolesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiRolesId = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Roles/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiRolesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRolesId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRolesId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiRolesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRolesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiRolesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRolesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRolesId>>>
    
    export type DeleteApiRolesIdMutationError = ProblemDetails

    export const useDeleteApiRolesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRolesId>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiRolesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiRolesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiShows = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiShowsQueryKey = () => {
    return [`/api/Shows`] as const;
    }

    
export const getGetApiShowsQueryOptions = <TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiShowsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiShows>>> = ({ signal }) => getApiShows(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiShowsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiShows>>>
export type GetApiShowsQueryError = unknown


export function useGetApiShows<TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShows>>,
          TError,
          Awaited<ReturnType<typeof getApiShows>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShows<TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShows>>,
          TError,
          Awaited<ReturnType<typeof getApiShows>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShows<TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiShows<TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiShowsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiShows = (
    createShowDto: CreateShowDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createShowDto, signal
    },
      );
    }
  


export const getPostApiShowsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiShows>>, TError,{data: CreateShowDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiShows>>, TError,{data: CreateShowDto}, TContext> => {
    
const mutationKey = ['postApiShows'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiShows>>, {data: CreateShowDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiShows(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiShowsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiShows>>>
    export type PostApiShowsMutationBody = CreateShowDto
    export type PostApiShowsMutationError = ProblemDetails

    export const usePostApiShows = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiShows>>, TError,{data: CreateShowDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiShows>>,
        TError,
        {data: CreateShowDto},
        TContext
      > => {

      const mutationOptions = getPostApiShowsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiShowsId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiShowsIdQueryKey = (id: number,) => {
    return [`/api/Shows/${id}`] as const;
    }

    
export const getGetApiShowsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiShowsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiShowsId>>> = ({ signal }) => getApiShowsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiShowsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiShowsId>>>
export type GetApiShowsIdQueryError = ProblemDetails


export function useGetApiShowsId<TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsId>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsId<TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsId>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsId<TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiShowsId<TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiShowsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiShowsId = (
    id: number,
    updateShowDto: UpdateShowDto,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateShowDto
    },
      );
    }
  


export const getPutApiShowsIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiShowsId>>, TError,{id: number;data: UpdateShowDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiShowsId>>, TError,{id: number;data: UpdateShowDto}, TContext> => {
    
const mutationKey = ['putApiShowsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiShowsId>>, {id: number;data: UpdateShowDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiShowsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiShowsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiShowsId>>>
    export type PutApiShowsIdMutationBody = UpdateShowDto
    export type PutApiShowsIdMutationError = ProblemDetails

    export const usePutApiShowsId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiShowsId>>, TError,{id: number;data: UpdateShowDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApiShowsId>>,
        TError,
        {id: number;data: UpdateShowDto},
        TContext
      > => {

      const mutationOptions = getPutApiShowsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiShowsId = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiShowsIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiShowsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiShowsId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiShowsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiShowsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiShowsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiShowsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiShowsId>>>
    
    export type DeleteApiShowsIdMutationError = ProblemDetails

    export const useDeleteApiShowsId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiShowsId>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiShowsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiShowsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiShowsAgeRestrictions = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/age-restrictions`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiShowsAgeRestrictionsQueryKey = () => {
    return [`/api/Shows/age-restrictions`] as const;
    }

    
export const getGetApiShowsAgeRestrictionsQueryOptions = <TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiShowsAgeRestrictionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>> = ({ signal }) => getApiShowsAgeRestrictions(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiShowsAgeRestrictionsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>>
export type GetApiShowsAgeRestrictionsQueryError = unknown


export function useGetApiShowsAgeRestrictions<TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsAgeRestrictions<TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsAgeRestrictions<TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiShowsAgeRestrictions<TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiShowsAgeRestrictionsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiShowsShowTypes = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/show-types`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiShowsShowTypesQueryKey = () => {
    return [`/api/Shows/show-types`] as const;
    }

    
export const getGetApiShowsShowTypesQueryOptions = <TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiShowsShowTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiShowsShowTypes>>> = ({ signal }) => getApiShowsShowTypes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiShowsShowTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiShowsShowTypes>>>
export type GetApiShowsShowTypesQueryError = unknown


export function useGetApiShowsShowTypes<TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsShowTypes>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsShowTypes>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsShowTypes<TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsShowTypes>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsShowTypes>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsShowTypes<TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiShowsShowTypes<TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiShowsShowTypesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiVenues = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiVenuesQueryKey = () => {
    return [`/api/Venues`] as const;
    }

    
export const getGetApiVenuesQueryOptions = <TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiVenuesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiVenues>>> = ({ signal }) => getApiVenues(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiVenuesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiVenues>>>
export type GetApiVenuesQueryError = unknown


export function useGetApiVenues<TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenues>>,
          TError,
          Awaited<ReturnType<typeof getApiVenues>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenues<TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenues>>,
          TError,
          Awaited<ReturnType<typeof getApiVenues>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenues<TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiVenues<TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiVenuesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiVenues = (
    createVenueDto: CreateVenueDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createVenueDto, signal
    },
      );
    }
  


export const getPostApiVenuesMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVenues>>, TError,{data: CreateVenueDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiVenues>>, TError,{data: CreateVenueDto}, TContext> => {
    
const mutationKey = ['postApiVenues'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiVenues>>, {data: CreateVenueDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiVenues(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiVenuesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiVenues>>>
    export type PostApiVenuesMutationBody = CreateVenueDto
    export type PostApiVenuesMutationError = ProblemDetails

    export const usePostApiVenues = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVenues>>, TError,{data: CreateVenueDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiVenues>>,
        TError,
        {data: CreateVenueDto},
        TContext
      > => {

      const mutationOptions = getPostApiVenuesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiVenuesId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiVenuesIdQueryKey = (id: number,) => {
    return [`/api/Venues/${id}`] as const;
    }

    
export const getGetApiVenuesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiVenuesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiVenuesId>>> = ({ signal }) => getApiVenuesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiVenuesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiVenuesId>>>
export type GetApiVenuesIdQueryError = ProblemDetails


export function useGetApiVenuesId<TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenuesId>>,
          TError,
          Awaited<ReturnType<typeof getApiVenuesId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenuesId<TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenuesId>>,
          TError,
          Awaited<ReturnType<typeof getApiVenuesId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenuesId<TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiVenuesId<TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiVenuesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiVenuesId = (
    id: number,
    createVenueDto: CreateVenueDto,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createVenueDto
    },
      );
    }
  


export const getPutApiVenuesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiVenuesId>>, TError,{id: number;data: CreateVenueDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiVenuesId>>, TError,{id: number;data: CreateVenueDto}, TContext> => {
    
const mutationKey = ['putApiVenuesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiVenuesId>>, {id: number;data: CreateVenueDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiVenuesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiVenuesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiVenuesId>>>
    export type PutApiVenuesIdMutationBody = CreateVenueDto
    export type PutApiVenuesIdMutationError = ProblemDetails

    export const usePutApiVenuesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiVenuesId>>, TError,{id: number;data: CreateVenueDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApiVenuesId>>,
        TError,
        {id: number;data: CreateVenueDto},
        TContext
      > => {

      const mutationOptions = getPutApiVenuesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiVenuesId = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiVenuesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiVenuesId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiVenuesId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiVenuesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiVenuesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiVenuesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiVenuesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiVenuesId>>>
    
    export type DeleteApiVenuesIdMutationError = ProblemDetails

    export const useDeleteApiVenuesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiVenuesId>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiVenuesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiVenuesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
